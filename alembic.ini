[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file as well as the filename.
# string value is passed to datetime.datetime.strftime()
# default is to use the literal string "utc" which renders the date in UTC.
# set to "local" to render the date using the local timezone.
sqlalchemy.url = postgresql://flask_user:1441@localhost/task_manager  # Replace with your actual database URL

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s

[post_write_hooks]
# post_write_hooks defines scripts or Python functions to run after a new revision file is generated.
# hooks can be used to run code formatting tools, linters, etc. on the newly generated file.
# Each hook can define a "type" and a "hook" key. The "type" key specifies the type of hook to run,
# and the "hook" key specifies the script or function to run.
# Example:
# hooks = black, isort
# 
# [post_write_hooks.black]
# type = python
# hook = black
# 
# [post_write_hooks.isort]
# type = python
# hook = isort

# Example of a shell script hook:
# hooks = my_shell_script
# 
# [post_write_hooks.my_shell_script]
# type = shell
# hook = /path/to/my_shell_script.sh
